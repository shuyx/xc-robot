#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
配置管理组件 - 简洁版
用于管理机器人系统配置
"""

import yaml
import json
import os
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *

class ConfigWidget(QWidget):
    """配置管理主界面"""
    
    config_changed = pyqtSignal(str, dict)
    
    def __init__(self):
        super().__init__()
        self.config_file = "robot_config.yaml"
        self.config_data = self.load_config()
        self.init_ui()
        
    def init_ui(self):
        """初始化界面"""
        layout = QVBoxLayout(self)
        
        # 工具栏
        toolbar = QHBoxLayout()
        self.load_btn = QPushButton("加载")
        self.save_btn = QPushButton("保存")
        self.reset_btn = QPushButton("重置")
        
        self.load_btn.clicked.connect(self.load_config_file)
        self.save_btn.clicked.connect(self.save_config)
        self.reset_btn.clicked.connect(self.reset_config)
        
        toolbar.addWidget(self.load_btn)
        toolbar.addWidget(self.save_btn)
        toolbar.addWidget(self.reset_btn)
        toolbar.addStretch()
        
        self.status_label = QLabel("配置已加载")
        self.status_label.setStyleSheet("color: green;")
        toolbar.addWidget(self.status_label)
        
        layout.addLayout(toolbar)
        
        # 配置选项卡
        self.tab_widget = QTabWidget()
        
        # 网络配置
        self.create_network_tab()
        
        # 机械臂配置
        self.create_arm_tab()
        
        # 底盘配置
        self.create_chassis_tab()
        
        # 系统配置
        self.create_system_tab()
        
        layout.addWidget(self.tab_widget)
        
    def create_network_tab(self):
        """创建网络配置页"""
        tab = QWidget()
        layout = QFormLayout(tab)
        
        # IP配置
        self.right_arm_ip = QLineEdit(self.config_data.get("network", {}).get("right_arm_ip", "192.168.58.2"))
        self.left_arm_ip = QLineEdit(self.config_data.get("network", {}).get("left_arm_ip", "192.168.58.3"))
        self.chassis_ip = QLineEdit(self.config_data.get("network", {}).get("chassis_ip", "192.168.1.100"))
        
        layout.addRow("右臂IP:", self.right_arm_ip)
        layout.addRow("左臂IP:", self.left_arm_ip)
        layout.addRow("底盘IP:", self.chassis_ip)
        
        # 端口配置
        self.arm_port = QSpinBox()
        self.arm_port.setRange(1000, 65535)
        self.arm_port.setValue(self.config_data.get("network", {}).get("arm_port", 20003))
        
        self.chassis_port = QSpinBox()
        self.chassis_port.setRange(1000, 65535)
        self.chassis_port.setValue(self.config_data.get("network", {}).get("chassis_port", 19204))
        
        layout.addRow("机械臂端口:", self.arm_port)
        layout.addRow("底盘端口:", self.chassis_port)
        
        # 连接超时
        self.timeout_spin = QSpinBox()
        self.timeout_spin.setRange(1, 60)
        self.timeout_spin.setValue(self.config_data.get("network", {}).get("timeout", 5))
        self.timeout_spin.setSuffix(" 秒")
        
        layout.addRow("连接超时:", self.timeout_spin)
        
        self.tab_widget.addTab(tab, "网络配置")
        
    def create_arm_tab(self):
        """创建机械臂配置页"""
        tab = QWidget()
        layout = QFormLayout(tab)
        
        # 运动参数
        self.default_speed = QSpinBox()
        self.default_speed.setRange(1, 100)
        self.default_speed.setValue(self.config_data.get("motion", {}).get("default_speed", 20))
        self.default_speed.setSuffix(" %")
        
        self.joint_speed = QSpinBox()
        self.joint_speed.setRange(1, 50)
        self.joint_speed.setValue(self.config_data.get("motion", {}).get("joint_speed", 10))
        self.joint_speed.setSuffix(" %")
        
        layout.addRow("默认速度:", self.default_speed)
        layout.addRow("关节点动速度:", self.joint_speed)
        
        # 安全参数
        self.enable_collision = QCheckBox()
        self.enable_collision.setChecked(self.config_data.get("safety", {}).get("collision_detection", True))
        
        self.workspace_limit = QCheckBox()
        self.workspace_limit.setChecked(self.config_data.get("safety", {}).get("workspace_limit", True))
        
        layout.addRow("碰撞检测:", self.enable_collision)
        layout.addRow("工作空间限制:", self.workspace_limit)
        
        # Home位置
        home_pos = self.config_data.get("motion", {}).get("home_position", [0, -20, -90, -90, 90, 0])
        self.home_position = QLineEdit(str(home_pos))
        layout.addRow("Home位置:", self.home_position)
        
        self.tab_widget.addTab(tab, "机械臂配置")
        
    def create_chassis_tab(self):
        """创建底盘配置页"""
        tab = QWidget()
        layout = QFormLayout(tab)
        
        # 运动参数
        self.chassis_speed = QSpinBox()
        self.chassis_speed.setRange(1, 100)
        self.chassis_speed.setValue(self.config_data.get("chassis", {}).get("default_speed", 30))
        self.chassis_speed.setSuffix(" %")
        
        self.rotation_speed = QSpinBox()
        self.rotation_speed.setRange(1, 100)
        self.rotation_speed.setValue(self.config_data.get("chassis", {}).get("rotation_speed", 20))
        self.rotation_speed.setSuffix(" %")
        
        layout.addRow("移动速度:", self.chassis_speed)
        layout.addRow("旋转速度:", self.rotation_speed)
        
        # 预设位置编辑
        preset_group = QGroupBox("预设位置")
        preset_layout = QVBoxLayout(preset_group)
        
        self.preset_table = QTableWidget(4, 4)
        self.preset_table.setHorizontalHeaderLabels(["名称", "X(m)", "Y(m)", "角度(°)"])
        
        # 加载预设位置数据
        presets = self.config_data.get("chassis", {}).get("preset_positions", {})
        default_presets = [
            ("原点", 0.0, 0.0, 0.0),
            ("工作站1", 2.0, 1.0, 90.0),
            ("工作站2", -2.0, 1.0, -90.0),
            ("充电站", 0.0, -3.0, 180.0)
        ]
        
        for i, (name, x, y, theta) in enumerate(default_presets):
            self.preset_table.setItem(i, 0, QTableWidgetItem(name))
            self.preset_table.setItem(i, 1, QTableWidgetItem(str(x)))
            self.preset_table.setItem(i, 2, QTableWidgetItem(str(y)))
            self.preset_table.setItem(i, 3, QTableWidgetItem(str(theta)))
        
        preset_layout.addWidget(self.preset_table)
        layout.addRow(preset_group)
        
        self.tab_widget.addTab(tab, "底盘配置")
        
    def create_system_tab(self):
        """创建系统配置页"""
        tab = QWidget()
        layout = QFormLayout(tab)
        
        # 基本信息
        self.system_name = QLineEdit(self.config_data.get("system", {}).get("name", "XC-ROBOT"))
        self.system_version = QLineEdit(self.config_data.get("system", {}).get("version", "1.0.0"))
        
        layout.addRow("系统名称:", self.system_name)
        layout.addRow("版本:", self.system_version)
        
        # 日志配置
        self.log_level = QComboBox()
        self.log_level.addItems(["DEBUG", "INFO", "WARNING", "ERROR"])
        self.log_level.setCurrentText(self.config_data.get("logging", {}).get("level", "INFO"))
        
        self.log_max_files = QSpinBox()
        self.log_max_files.setRange(1, 100)
        self.log_max_files.setValue(self.config_data.get("logging", {}).get("max_files", 10))
        
        layout.addRow("日志级别:", self.log_level)
        layout.addRow("最大日志文件数:", self.log_max_files)
        
        # 自动保存
        self.auto_save = QCheckBox()
        self.auto_save.setChecked(self.config_data.get("system", {}).get("auto_save", True))
        
        self.save_interval = QSpinBox()
        self.save_interval.setRange(1, 60)
        self.save_interval.setValue(self.config_data.get("system", {}).get("save_interval", 5))
        self.save_interval.setSuffix(" 分钟")
        
        layout.addRow("自动保存:", self.auto_save)
        layout.addRow("保存间隔:", self.save_interval)
        
        self.tab_widget.addTab(tab, "系统配置")
        
    def load_config(self):
        """加载配置文件"""
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return yaml.safe_load(f) or {}
            except:
                return self.get_default_config()
        else:
            return self.get_default_config()
    
    def get_default_config(self):
        """获取默认配置"""
        return {
            "system": {
                "name": "XC-ROBOT",
                "version": "1.0.0",
                "auto_save": True,
                "save_interval": 5
            },
            "network": {
                "right_arm_ip": "192.168.58.2",
                "left_arm_ip": "192.168.58.3",
                "chassis_ip": "192.168.1.100",
                "arm_port": 20003,
                "chassis_port": 19204,
                "timeout": 5
            },
            "motion": {
                "default_speed": 20,
                "joint_speed": 10,
                "home_position": [0, -20, -90, -90, 90, 0]
            },
            "chassis": {
                "default_speed": 30,
                "rotation_speed": 20,
                "preset_positions": {}
            },
            "safety": {
                "collision_detection": True,
                "workspace_limit": True
            },
            "logging": {
                "level": "INFO",
                "max_files": 10
            }
        }
    
    def collect_config_data(self):
        """收集界面配置数据"""
        # 网络配置
        network = {
            "right_arm_ip": self.right_arm_ip.text(),
            "left_arm_ip": self.left_arm_ip.text(),
            "chassis_ip": self.chassis_ip.text(),
            "arm_port": self.arm_port.value(),
            "chassis_port": self.chassis_port.value(),
            "timeout": self.timeout_spin.value()
        }
        
        # 运动配置
        motion = {
            "default_speed": self.default_speed.value(),
            "joint_speed": self.joint_speed.value(),
            "home_position": eval(self.home_position.text())
        }
        
        # 底盘配置
        chassis = {
            "default_speed": self.chassis_speed.value(),
            "rotation_speed": self.rotation_speed.value(),
            "preset_positions": self.get_preset_positions()
        }
        
        # 安全配置
        safety = {
            "collision_detection": self.enable_collision.isChecked(),
            "workspace_limit": self.workspace_limit.isChecked()
        }
        
        # 系统配置
        system = {
            "name": self.system_name.text(),
            "version": self.system_version.text(),
            "auto_save": self.auto_save.isChecked(),
            "save_interval": self.save_interval.value()
        }
        
        # 日志配置
        logging = {
            "level": self.log_level.currentText(),
            "max_files": self.log_max_files.value()
        }
        
        return {
            "network": network,
            "motion": motion,
            "chassis": chassis,
            "safety": safety,
            "system": system,
            "logging": logging
        }
    
    def get_preset_positions(self):
        """获取预设位置数据"""
        positions = {}
        for row in range(self.preset_table.rowCount()):
            name_item = self.preset_table.item(row, 0)
            x_item = self.preset_table.item(row, 1)
            y_item = self.preset_table.item(row, 2)
            theta_item = self.preset_table.item(row, 3)
            
            if name_item and x_item and y_item and theta_item:
                try:
                    name = name_item.text()
                    x = float(x_item.text())
                    y = float(y_item.text())
                    theta = float(theta_item.text())
                    positions[name] = {"x": x, "y": y, "theta": theta}
                except:
                    pass
        return positions
    
    def save_config(self):
        """保存配置"""
        try:
            self.config_data = self.collect_config_data()
            
            with open(self.config_file, 'w', encoding='utf-8') as f:
                yaml.dump(self.config_data, f, default_flow_style=False, allow_unicode=True)
            
            self.status_label.setText("配置已保存")
            self.status_label.setStyleSheet("color: green;")
            self.config_changed.emit("all", self.config_data)
            
        except Exception as e:
            self.status_label.setText(f"保存失败: {e}")
            self.status_label.setStyleSheet("color: red;")
    
    def load_config_file(self):
        """加载配置文件"""
        filename, _ = QFileDialog.getOpenFileName(
            self, "加载配置文件", "", "YAML文件 (*.yaml *.yml);;所有文件 (*)"
        )
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    self.config_data = yaml.safe_load(f)
                self.refresh_ui()
                self.status_label.setText("配置已加载")
                self.status_label.setStyleSheet("color: green;")
            except Exception as e:
                self.status_label.setText(f"加载失败: {e}")
                self.status_label.setStyleSheet("color: red;")
    
    def reset_config(self):
        """重置为默认配置"""
        reply = QMessageBox.question(
            self, "确认重置", "确定要重置为默认配置吗？",
            QMessageBox.Yes | QMessageBox.No
        )
        if reply == QMessageBox.Yes:
            self.config_data = self.get_default_config()
            self.refresh_ui()
            self.status_label.setText("已重置为默认配置")
            self.status_label.setStyleSheet("color: blue;")
    
    def refresh_ui(self):
        """刷新界面显示"""
        # 重新加载数据到界面控件
        # 这里可以根据需要重新创建选项卡或更新现有控件
        pass
    